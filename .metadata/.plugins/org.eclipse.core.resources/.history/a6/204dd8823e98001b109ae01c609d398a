package com.trifulcas.ejercicio01;

public class ManipulaCadenas {
	private String cadena;

	public ManipulaCadenas(String cadena) {
		this.cadena = cadena;
	}

	public String getCadena() {
		return cadena;
	}

	/**
	 * Busca la cadena dentro de la propiedad de la clase Y si está, la repite
	 * 
	 * @param cad La cadena a buscar
	 * 
	 */
	public void repetir(String cad) {
		// Averiguar si la cadena que me pasan como parámetro
		// Está dentro de la cadena de la clase
		// Si no está no hago nada
		// Si está inserto la cadena que me pasan en la posición
		// de la cadena
		int pos = cadena.indexOf(cad);
		if (pos != -1) {
			// '123456789' y busco '34' está en la posición '2'
			// Yo tengo que insertar '34' en la posición 2
			// Manera 1 usando insert de StringBuilder
			StringBuilder temp = new StringBuilder(cadena);
			temp.insert(pos, cad); // '12343456789'
			// cadena = temp.toString();
			// Manera 2 lo mismo pero compacto
			cadena = new StringBuilder(cadena).insert(pos, cad).toString();

			// Manera 3 usando substring
			// cadena = cadena.substring(0, pos) + cad + cadena.substring(pos);
		}

	}

	/**
	 * Elimina el primer carácter y el último de la cadena si su longitud es mayor a
	 * 2
	 */
	public void erosionar() {
		// Compruebo si tiene longitud>2
		// Si es así quito el caracter 1º y último
		if (cadena.length() >= 2) {
			// No me complico y uso substring
			//cadena = cadena.substring(1, cadena.length() - 1);
			
			// Me aprovecho de las funcionalidades de StringBuilder
			cadena=new StringBuilder(cadena).deleteCharAt(cadena.length()-1).deleteCharAt(0).toString();
		}
	}

	public void agujero() {
		// Par o impar
		// Si es par quitar los caracteres del medio
		// Si es impar quitar el carácter del medio
		if (cadena.length()%2==0) {
			// Es par: los dos del medio
		} else {
			// Es impar: el del medio
		}
	}
}
